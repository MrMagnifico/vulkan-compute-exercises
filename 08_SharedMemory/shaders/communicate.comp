#version 450

#extension GL_EXT_debug_printf : require

#define NUMS_TO_COMPUTE 32
#define GOLDEN_RATIO 1.6180339887
#define GOLDEN_RATIO_CONJUGATE -0.6180339887

// TODO: Declare a shared array large enough to hold 32 integeres
shared int arr[NUMS_TO_COMPUTE];

float negativeBasePow(float base, uint exponent) {
	float result = pow(abs(base), exponent);
	// if (exponent % 2 == 1) { result = -result; }
	return result;
}

layout(local_size_x = NUMS_TO_COMPUTE, local_size_y = 1, local_size_z = 1) in;
void main() {
	// TODO: Let each thread n compute the n-th Fibonacci number
	// (you already have code for this now). Then, let each thread
	// store his computed number in the shared array at position n.
	uint globalId 		= gl_GlobalInvocationID.x;
	float numeratorLhs	= pow(GOLDEN_RATIO, globalId);
	float numeratorRhs	= negativeBasePow(GOLDEN_RATIO_CONJUGATE, globalId);
	arr[globalId]		= int((numeratorLhs - numeratorRhs) / sqrt(5));

	// TODO: Add a barrier. Before you can use the data, you must
	// ensure that the consuming threads wait until the writers
	// have finished execution and the memory is visible. Within
	// a block, both of these things are realized by a barrier(),
	// which makes all previous accesses visible to everyone else
	// in the group (and only in the group).
	barrier();

	// TODO: To produce a nicely organized output, thread 0 should
	// print all computed Fibonacci numbers, in order, by reading 
	// them from shared memory. Note how this thread is now using
	// data that other threads have computed! This is a very powerful
	// concept for GPU programming.
	if (globalId == 0) {
		debugPrintfEXT("The first %d Fibonacci numbers are:\n", NUMS_TO_COMPUTE);
		for (int i = 0; i < NUMS_TO_COMPUTE; i++) { debugPrintfEXT("%d: %d\n", i, arr[i]); }
	}
}
